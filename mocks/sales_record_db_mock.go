// Code generated by MockGen. DO NOT EDIT.
// Source: ./repo/sales_record_db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockSalesRecordDB is a mock of SalesRecordDB interface.
type MockSalesRecordDB struct {
	ctrl     *gomock.Controller
	recorder *MockSalesRecordDBMockRecorder
}

// MockSalesRecordDBMockRecorder is the mock recorder for MockSalesRecordDB.
type MockSalesRecordDBMockRecorder struct {
	mock *MockSalesRecordDB
}

// NewMockSalesRecordDB creates a new mock instance.
func NewMockSalesRecordDB(ctrl *gomock.Controller) *MockSalesRecordDB {
	mock := &MockSalesRecordDB{ctrl: ctrl}
	mock.recorder = &MockSalesRecordDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalesRecordDB) EXPECT() *MockSalesRecordDBMockRecorder {
	return m.recorder
}

// InsertMany mocks base method.
func (m *MockSalesRecordDB) InsertMany(arg0 []interface{}) (*mongo.InsertManyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", arg0)
	ret0, _ := ret[0].(*mongo.InsertManyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockSalesRecordDBMockRecorder) InsertMany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockSalesRecordDB)(nil).InsertMany), arg0)
}
